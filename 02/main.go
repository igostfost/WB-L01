package main

import (
	"fmt"
	"sync"
)

/*Написать программу, которая конкурентно рассчитает значение квадратов чисел
взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.
*/

func main() {
	arr := [5]int{2, 4, 6, 8, 10}

	wg := sync.WaitGroup{}
	for _, val := range arr {
		wg.Add(1)
		go func(val int) {
			fmt.Println(val * val)
			wg.Done()
		}(val)
	}
	wg.Wait()
}

// В Go при использовании анонимной функции (или замыкания) внутри цикла,
// как в нашем случае, переменные захватываются в момент создания горутины.
// В данном случае переменная val захватывается замыканием, и каждая горутина получает свою копию val.
// Когда горутина запускается, она работает с копией val, которая была актуальной на момент создания горутины.

// Это называется "захват переменной (variable capture)" в замыкании, и это одна из ключевых концепций
// в Go для работы с горутинами и замыканиями.
